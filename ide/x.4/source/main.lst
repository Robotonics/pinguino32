gplink-1.2.0 #983 (Jul 12 2013)
Copyright (c) 1998-2013 gputils project
Listing File Generated: 4-3-2014  15:53:19
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8447 (Jul 12 2013) (Linux)
                                           ; This file was generated Thu Apr  3 15:53:19 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f47j53
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	_main
                                           	global	_Delayms
                                           	global	_Delayus
                                           	global	_digitalwrite
                                           	global	_digitalread
                                           	global	_pinmode
                                           	global	_toggle
                                           	global	_IO_init
                                           	global	_IO_digital
                                           	global	_IO_remap
                                           	global	_setup
                                           	global	_loop
                                           	global	_mask
                                           	global	_port
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_ADCTRIGbits
                                           	extern	_PD0bits
                                           	extern	_PMDIS0bits
                                           	extern	_PD1bits
                                           	extern	_PMDIS1bits
                                           	extern	_PD2bits
                                           	extern	_PMDIS2bits
                                           	extern	_PD3bits
                                           	extern	_PMDIS3bits
                                           	extern	_PPSCONbits
                                           	extern	_CCP10CONbits
                                           	extern	_CCP9CONbits
                                           	extern	_CCP8CONbits
                                           	extern	_CCP7CONbits
                                           	extern	_CCP6CONbits
                                           	extern	_CCP5CONbits
                                           	extern	_CCP4CONbits
                                           	extern	_CCP3CONbits
                                           	extern	_ECCP3DELbits
                                           	extern	_ECCP3ASbits
                                           	extern	_PSTR3CONbits
                                           	extern	_T8CONbits
                                           	extern	_T6CONbits
                                           	extern	_T5GCONbits
                                           	extern	_T5CONbits
                                           	extern	_CM3CONbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_UIEbits
                                           	extern	_UEIEbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_PADCFG1bits
                                           	extern	_REFOCONbits
                                           	extern	_RTCCALbits
                                           	extern	_RTCCFGbits
                                           	extern	_ODCON3bits
                                           	extern	_ODCON2bits
                                           	extern	_ODCON1bits
                                           	extern	_ALRMRPTbits
                                           	extern	_ALRMCFGbits
                                           	extern	_ANCON0bits
                                           	extern	_ANCON1bits
                                           	extern	_DSWAKELbits
                                           	extern	_DSWAKEHbits
                                           	extern	_DSCONLbits
                                           	extern	_DSCONHbits
                                           	extern	_CCPTMRS2bits
                                           	extern	_CCPTMRS1bits
                                           	extern	_CCPTMRS0bits
                                           	extern	_CVRCONbits
                                           	extern	_PMSTATLbits
                                           	extern	_PMSTATHbits
                                           	extern	_PMELbits
                                           	extern	_PMEHbits
                                           	extern	_PMMODELbits
                                           	extern	_PMMODEHbits
                                           	extern	_PMCONLbits
                                           	extern	_PMCONHbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UEIRbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_PMADDRHbits
                                           	extern	_CMSTATbits
                                           	extern	_CMSTATUSbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_SSP2MSKbits
                                           	extern	_T4CONbits
                                           	extern	_T3CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_HLVDCONbits
                                           	extern	_DMACON2bits
                                           	extern	_OSCCON2bits
                                           	extern	_DMACON1bits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_PIE4bits
                                           	extern	_PIR4bits
                                           	extern	_IPR4bits
                                           	extern	_PIE5bits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_TRISDbits
                                           	extern	_TRISEbits
                                           	extern	_T3GCONbits
                                           	extern	_PIR5bits
                                           	extern	_IPR5bits
                                           	extern	_T1GCONbits
                                           	extern	_OSCTUNEbits
                                           	extern	_RCSTA2bits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_TXSTA2bits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCONHbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_ECCP2DELbits
                                           	extern	_PWM2CONbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PSTR1CONbits
                                           	extern	_WDTCONbits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1MSKbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON1bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_stack_end
                                           	extern	_ADCTRIG
                                           	extern	_PD0
                                           	extern	_PMDIS0
                                           	extern	_PD1
                                           	extern	_PMDIS1
                                           	extern	_PD2
                                           	extern	_PMDIS2
                                           	extern	_PD3
                                           	extern	_PMDIS3
                                           	extern	_PPSCON
                                           	extern	_RPOR0
                                           	extern	_RPOR1
                                           	extern	_RPOR2
                                           	extern	_RPOR3
                                           	extern	_RPOR4
                                           	extern	_RPOR5
                                           	extern	_RPOR6
                                           	extern	_RPOR7
                                           	extern	_RPOR8
                                           	extern	_RPOR9
                                           	extern	_RPOR10
                                           	extern	_RPOR11
                                           	extern	_RPOR12
                                           	extern	_RPOR13
                                           	extern	_RPOR17
                                           	extern	_RPOR18
                                           	extern	_RPOR19
                                           	extern	_RPOR20
                                           	extern	_RPOR21
                                           	extern	_RPOR22
                                           	extern	_RPOR23
                                           	extern	_RPOR24
                                           	extern	_RPINR1
                                           	extern	_RPINR2
                                           	extern	_RPINR3
                                           	extern	_RPINR4
                                           	extern	_RPINR6
                                           	extern	_RPINR15
                                           	extern	_RPINR7
                                           	extern	_RPINR8
                                           	extern	_RPINR9
                                           	extern	_RPINR12
                                           	extern	_RPINR13
                                           	extern	_RPINR14
                                           	extern	_RPINR16
                                           	extern	_RPINR17
                                           	extern	_RPINR21
                                           	extern	_RPINR22
                                           	extern	_RPINR23
                                           	extern	_RPINR24
                                           	extern	_CCP10CON
                                           	extern	_CCPR10L
                                           	extern	_CCPR10H
                                           	extern	_CCP9CON
                                           	extern	_CCPR9L
                                           	extern	_CCPR9H
                                           	extern	_CCP8CON
                                           	extern	_CCPR8L
                                           	extern	_CCPR8H
                                           	extern	_CCP7CON
                                           	extern	_CCPR7L
                                           	extern	_CCPR7H
                                           	extern	_CCP6CON
                                           	extern	_CCPR6L
                                           	extern	_CCPR6H
                                           	extern	_CCP5CON
                                           	extern	_CCPR5L
                                           	extern	_CCPR5H
                                           	extern	_CCP4CON
                                           	extern	_CCPR4L
                                           	extern	_CCPR4H
                                           	extern	_CCP3CON
                                           	extern	_CCPR3L
                                           	extern	_CCPR3H
                                           	extern	_ECCP3DEL
                                           	extern	_ECCP3AS
                                           	extern	_PSTR3CON
                                           	extern	_T8CON
                                           	extern	_PR8
                                           	extern	_TMR8
                                           	extern	_T6CON
                                           	extern	_PR6
                                           	extern	_TMR6
                                           	extern	_T5GCON
                                           	extern	_T5CON
                                           	extern	_TMR5L
                                           	extern	_TMR5H
                                           	extern	_CM3CON
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_UIE
                                           	extern	_UEIE
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_RTCVALL
                                           	extern	_RTCVALH
                                           	extern	_PADCFG1
                                           	extern	_REFOCON
                                           	extern	_RTCCAL
                                           	extern	_RTCCFG
                                           	extern	_ODCON3
                                           	extern	_ODCON2
                                           	extern	_ODCON1
                                           	extern	_ALRMVALL
                                           	extern	_ALRMVALH
                                           	extern	_ALRMRPT
                                           	extern	_ALRMCFG
                                           	extern	_ANCON0
                                           	extern	_ANCON1
                                           	extern	_DSWAKEL
                                           	extern	_DSWAKEH
                                           	extern	_DSCONL
                                           	extern	_DSCONH
                                           	extern	_DSGPR0
                                           	extern	_DSGPR1
                                           	extern	_CCPTMRS2
                                           	extern	_CCPTMRS1
                                           	extern	_CCPTMRS0
                                           	extern	_CVRCON
                                           	extern	_PMSTATL
                                           	extern	_PMSTATH
                                           	extern	_PMEL
                                           	extern	_PMEH
                                           	extern	_PMDIN2L
                                           	extern	_PMDIN2H
                                           	extern	_PMDOUT2L
                                           	extern	_PMDOUT2H
                                           	extern	_PMMODEL
                                           	extern	_PMMODEH
                                           	extern	_PMCONL
                                           	extern	_PMCONH
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UEIR
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_DMABCH
                                           	extern	_DMABCL
                                           	extern	_RXADDRH
                                           	extern	_RXADDRL
                                           	extern	_TXADDRH
                                           	extern	_TXADDRL
                                           	extern	_PMDIN1L
                                           	extern	_PMDIN1H
                                           	extern	_PMADDRL
                                           	extern	_PMDOUT1L
                                           	extern	_PMADDRH
                                           	extern	_PMDOUT1H
                                           	extern	_CMSTAT
                                           	extern	_CMSTATUS
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2MSK
                                           	extern	_SSP2BUF
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_BAUDCON2
                                           	extern	_SPBRGH2
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_HLVDCON
                                           	extern	_DMACON2
                                           	extern	_OSCCON2
                                           	extern	_DMACON1
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_PIE4
                                           	extern	_PIR4
                                           	extern	_IPR4
                                           	extern	_PIE5
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_TRISD
                                           	extern	_TRISE
                                           	extern	_T3GCON
                                           	extern	_PIR5
                                           	extern	_IPR5
                                           	extern	_T1GCON
                                           	extern	_OSCTUNE
                                           	extern	_RCSTA2
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_TXSTA2
                                           	extern	_TXREG2
                                           	extern	_RCREG2
                                           	extern	_SPBRG2
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_CTMUICON
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCONH
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_ECCP2DEL
                                           	extern	_PWM2CON
                                           	extern	_ECCP2AS
                                           	extern	_PSTR2CON
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_ECCP1AS
                                           	extern	_PSTR1CON
                                           	extern	_WDTCON
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSP1MSK
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_CM2CON
                                           	extern	_CM2CON1
                                           	extern	_CM1CON
                                           	extern	_CM1CON1
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_delay1ktcy
                                           	extern	_cinit
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           	idata
                                           ___uflags	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main___entry	code	0X000C00
                                           __entry:
000c00   ef2b     goto    0x1256           	goto __startup
000c02   f009
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	111; /dvpt/pinguino/svn/ide/x.4/source/main.c	if (RCONbits.NOT_POR == 0)
001428   b2d0     btfsc   0xd0, 0x1, 0     	BTFSC	_RCONbits, 1
00142a   d002     bra     0x1430           	BRA	_00323_DS_
                                           ;	.line	113; /dvpt/pinguino/svn/ide/x.4/source/main.c	RCON |= 0b10010011;     // set all reset flag
00142c   0e93     movlw   0x93             	MOVLW	0x93
00142e   12d0     iorwf   0xd0, 0x1, 0     	IORWF	_RCON, F
                                           _00323_DS_:
                                           ;	.line	164; /dvpt/pinguino/svn/ide/x.4/source/main.c	if (OSCCONbits.SCS > 0x02)
001430   50d3     movf    0xd3, 0, 0       	MOVF	_OSCCONbits, W
001432   0b03     andlw   0x3              	ANDLW	0x03
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
001434   0f80     addlw   0x80             	ADDLW	0x80
001436   0f7d     addlw   0x7d             	ADDLW	0x7d
001438   e302     bnc     0x143e           	BNC	_00328_DS_
                                           _00324_DS_:
                                           ;	.line	166; /dvpt/pinguino/svn/ide/x.4/source/main.c	while(!OSCCONbits.FLTS);
00143a   a4d3     btfss   0xd3, 0x2, 0     	BTFSS	_OSCCONbits, 2
00143c   d7fe     bra     0x143a           	BRA	_00324_DS_
                                           _00328_DS_:
                                           ;	.line	169; /dvpt/pinguino/svn/ide/x.4/source/main.c	OSCTUNEbits.PLLEN = 1;
00143e   8c9b     bsf     0x9b, 0x6, 0     	BSF	_OSCTUNEbits, 6
                                           ;	.line	170; /dvpt/pinguino/svn/ide/x.4/source/main.c	while (pll_startup_counter--);
001440   0e58     movlw   0x58             	MOVLW	0x58
001442   6e00     movwf   0, 0             	MOVWF	r0x00
001444   0e02     movlw   0x2              	MOVLW	0x02
001446   6e01     movwf   0x1, 0           	MOVWF	r0x01
                                           _00329_DS_:
001448   c000     movff   0, 0x2           	MOVFF	r0x00, r0x02
00144a   f002
00144c   c001     movff   0x1, 0x3         	MOVFF	r0x01, r0x03
00144e   f003
001450   0eff     movlw   0xff             	MOVLW	0xff
001452   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001454   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001456   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001458   1003     iorwf   0x3, 0, 0        	IORWF	r0x03, W
00145a   e1f6     bnz     0x1448           	BNZ	_00329_DS_
                                           ;	.line	178; /dvpt/pinguino/svn/ide/x.4/source/main.c	IO_init();
00145c   ec71     call    0x14e2, 0        	CALL	_IO_init
00145e   f00a
                                           ;	.line	179; /dvpt/pinguino/svn/ide/x.4/source/main.c	IO_digital();
001460   eca2     call    0x1544, 0        	CALL	_IO_digital
001462   f00a
                                           ;	.line	185; /dvpt/pinguino/svn/ide/x.4/source/main.c	IO_remap();
001464   ec5b     call    0x14b6, 0        	CALL	_IO_remap
001466   f00a
                                           ;	.line	226; /dvpt/pinguino/svn/ide/x.4/source/main.c	setup();
001468   ec93     call    0x1526, 0        	CALL	_setup
00146a   f00a
                                           _00333_DS_:
                                           ;	.line	247; /dvpt/pinguino/svn/ide/x.4/source/main.c	loop();
00146c   ec85     call    0x150a, 0        	CALL	_loop
00146e   f00a
001470   d7fd     bra     0x146c           	BRA	_00333_DS_
001472   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__loop	code
                                           _loop:
                                           ;	.line	13; /dvpt/pinguino/svn/ide/x.4/source/user.c	toggle(USERLED);			
00150a   0e12     movlw   0x12             	MOVLW	0x12
00150c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00150e   ec3a     call    0x1474, 0        	CALL	_toggle
001510   f00a
001512   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	14; /dvpt/pinguino/svn/ide/x.4/source/user.c	Delayms(2500);		        
001514   0e09     movlw   0x9              	MOVLW	0x09
001516   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
001518   0ec4     movlw   0xc4             	MOVLW	0xc4
00151a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00151c   ecc1     call    0x1382, 0        	CALL	_Delayms
00151e   f009
001520   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001522   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001524   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__setup	code
                                           _setup:
                                           ;	.line	8; /dvpt/pinguino/svn/ide/x.4/source/user.c	pinmode(USERLED, OUTPUT);     
001526   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
001528   0e12     movlw   0x12             	MOVLW	0x12
00152a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00152c   ec02     call    0xc04, 0         	CALL	_pinmode
00152e   f006
001530   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001532   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
001534   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__IO_remap	code
                                           _IO_remap:
                                           ;	.line	230; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	EECON2 = 0x55;
0014b6   0e55     movlw   0x55             	MOVLW	0x55
0014b8   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
                                           ;	.line	231; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	EECON2 = 0xAA;
0014ba   0eaa     movlw   0xaa             	MOVLW	0xaa
0014bc   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
0014be   010e     movlb   0xe              	BANKSEL	_PPSCONbits
                                           ;	.line	232; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PPSCONbits.IOLOCK = 0;			// Turn on PPS Write Protect
0014c0   91bf     bcf     0xbf, 0, 0x1     	BCF	_PPSCONbits, 0, B
                                           ;	.line	234; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	RPINR21 = 6;                    // RP6 (RB3) <- SDI2
0014c2   0e06     movlw   0x6              	MOVLW	0x06
0014c4   010e     movlb   0xe              	BANKSEL	_RPINR21
0014c6   6ffc     movwf   0xfc, 0x1        	MOVWF	_RPINR21, B
                                           ;	.line	235; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	RPOR5 = 11;                     // RP5 (RB2) -> SCK2
0014c8   0e0b     movlw   0xb              	MOVLW	0x0b
0014ca   010e     movlb   0xe              	BANKSEL	_RPOR5
0014cc   6fc5     movwf   0xc5, 0x1        	MOVWF	_RPOR5, B
                                           ;	.line	236; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	RPOR4 = 10;                     // RP4 (RB1) -> SDO2 (func. num. 10)
0014ce   0e0a     movlw   0xa              	MOVLW	0x0a
0014d0   010e     movlb   0xe              	BANKSEL	_RPOR4
0014d2   6fc4     movwf   0xc4, 0x1        	MOVWF	_RPOR4, B
                                           ;	.line	238; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	EECON2 = 0x55;
0014d4   0e55     movlw   0x55             	MOVLW	0x55
0014d6   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
                                           ;	.line	239; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	EECON2 = 0xAA;
0014d8   0eaa     movlw   0xaa             	MOVLW	0xaa
0014da   6ea7     movwf   0xa7, 0          	MOVWF	_EECON2
0014dc   010e     movlb   0xe              	BANKSEL	_PPSCONbits
                                           ;	.line	240; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PPSCONbits.IOLOCK = 1;			// Turn on PPS Write Protect
0014de   81bf     bsf     0xbf, 0, 0x1     	BSF	_PPSCONbits, 0, B
0014e0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__IO_digital	code
                                           _IO_digital:
001544   010f     movlb   0xf              	BANKSEL	_ANCON0
                                           ;	.line	137; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	ANCON0 = 0xFF;				// AN0 to AN7  Digital I/O
001546   6948     setf    0x48, 0x1        	SETF	_ANCON0, B
                                           ;	.line	138; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	ANCON1 = 0x1F;				// AN8 to AN12 Digital I/O
001548   0e1f     movlw   0x1f             	MOVLW	0x1f
00154a   010f     movlb   0xf              	BANKSEL	_ANCON1
00154c   6f49     movwf   0x49, 0x1        	MOVWF	_ANCON1, B
00154e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__IO_init	code
                                           _IO_init:
                                           ;	.line	46; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	LATA  = 0x00;
0014e2   6a89     clrf    0x89, 0          	CLRF	_LATA
                                           ;	.line	47; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	LATB  = 0x00;
0014e4   6a8a     clrf    0x8a, 0          	CLRF	_LATB
                                           ;	.line	54; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	LATC  = 0x00;	
0014e6   6a8b     clrf    0x8b, 0          	CLRF	_LATC
                                           ;	.line	71; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	LATD  = 0x00; 
0014e8   6a8c     clrf    0x8c, 0          	CLRF	_LATD
                                           ;	.line	72; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	LATE  = 0x00; 
0014ea   6a8d     clrf    0x8d, 0          	CLRF	_LATE
                                           ;	.line	75; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISA = 0x00;
0014ec   6a92     clrf    0x92, 0          	CLRF	_TRISA
                                           ;	.line	77; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISB = 0x00;
0014ee   6a93     clrf    0x93, 0          	CLRF	_TRISB
                                           ;	.line	79; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISCbits.TRISC0 = 0x00;
0014f0   9094     bcf     0x94, 0, 0       	BCF	_TRISCbits, 0
                                           ;	.line	80; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISCbits.TRISC1 = 0x00;
0014f2   9294     bcf     0x94, 0x1, 0     	BCF	_TRISCbits, 1
                                           ;	.line	81; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISCbits.TRISC2 = 0x00;
0014f4   9494     bcf     0x94, 0x2, 0     	BCF	_TRISCbits, 2
                                           ;	.line	82; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISCbits.TRISC6 = 0x00;
0014f6   9c94     bcf     0x94, 0x6, 0     	BCF	_TRISCbits, 6
                                           ;	.line	83; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISCbits.TRISC7 = 0x00;
0014f8   9e94     bcf     0x94, 0x7, 0     	BCF	_TRISCbits, 7
                                           ;	.line	87; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISD = 0x00; 
0014fa   6a95     clrf    0x95, 0          	CLRF	_TRISD
                                           ;	.line	88; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	TRISE = 0x00; 
0014fc   6a96     clrf    0x96, 0          	CLRF	_TRISE
                                           ;	.line	92; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PORTA  = 0x00;
0014fe   6a80     clrf    0x80, 0          	CLRF	_PORTA
                                           ;	.line	93; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PORTB  = 0x00;
001500   6a81     clrf    0x81, 0          	CLRF	_PORTB
                                           ;	.line	94; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PORTC  = 0x00;
001502   6a82     clrf    0x82, 0          	CLRF	_PORTC
                                           ;	.line	98; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PORTD  = 0x00; 
001504   6a83     clrf    0x83, 0          	CLRF	_PORTD
                                           ;	.line	99; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/io.c	PORTE  = 0x00; 
001506   6a84     clrf    0x84, 0          	CLRF	_PORTE
001508   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__toggle	code
                                           _toggle:
                                           ;	.line	409; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	void toggle(unsigned char pin)
001474   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001476   ffe5
001478   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00147a   ffd9
00147c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00147e   ffe5
001480   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001482   ffe5
001484   0e02     movlw   0x2              	MOVLW	0x02
001486   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
001488   f000
                                           ;	.line	422; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	state = digitalread(pin);
00148a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00148c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00148e   ec60     call    0x10c0, 0        	CALL	_digitalread
001490   f008
001492   6e01     movwf   0x1, 0           	MOVWF	r0x01
001494   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	423; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	digitalwrite(pin, state^1);
001496   7001     btg     0x1, 0, 0        	BTG	r0x01, 0
001498   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00149a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00149c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00149e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0014a0   ec31     call    0xe62, 0         	CALL	_digitalwrite
0014a2   f007
0014a4   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0014a6   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0014a8   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0014aa   f001
0014ac   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0014ae   f000
0014b0   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0014b2   ffd9
0014b4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__pinmode	code
                                           _pinmode:
                                           ;	.line	363; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	void pinmode(unsigned char pin, unsigned char state)
000c04   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000c06   ffe5
000c08   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000c0a   ffd9
000c0c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000c0e   ffe5
000c10   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000c12   ffe5
000c14   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000c16   ffe5
000c18   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000c1a   ffe5
000c1c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000c1e   ffe5
000c20   0e02     movlw   0x2              	MOVLW	0x02
000c22   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000c24   f000
000c26   0e03     movlw   0x3              	MOVLW	0x03
000c28   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000c2a   f001
                                           ;	.line	365; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	switch (port[pin])
000c2c   0e24     movlw   0x24             	MOVLW	LOW(_port)
000c2e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000c30   6e02     movwf   0x2, 0           	MOVWF	r0x02
000c32   6a03     clrf    0x3, 0           	CLRF	r0x03
000c34   0e13     movlw   0x13             	MOVLW	HIGH(_port)
000c36   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000c38   6a04     clrf    0x4, 0           	CLRF	r0x04
000c3a   0e00     movlw   0                	MOVLW	UPPER(_port)
000c3c   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000c3e   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000c40   fff6
000c42   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000c44   fff7
000c46   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000c48   fff8
000c4a   0009     tblrd   *+               	TBLRD*+	
000c4c   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000c4e   f002
000c50   0e05     movlw   0x5              	MOVLW	0x05
000c52   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000c54   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000c56   d0f8     bra     0xe48            	BRA	_00266_DS_
000c58   6afa     clrf    0xfa, 0          	CLRF	PCLATH
000c5a   6afb     clrf    0xfb, 0          	CLRF	PCLATU
000c5c   3402     rlcf    0x2, 0, 0        	RLCF	r0x02, W
000c5e   36fa     rlcf    0xfa, 0x1, 0     	RLCF	PCLATH, F
000c60   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
000c62   36fa     rlcf    0xfa, 0x1, 0     	RLCF	PCLATH, F
000c64   0bfc     andlw   0xfc             	ANDLW	0xfc
000c66   0f76     addlw   0x76             	ADDLW	LOW(_00287_DS_)
000c68   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000c6a   0e0c     movlw   0xc              	MOVLW	HIGH(_00287_DS_)
000c6c   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
000c6e   0e00     movlw   0                	MOVLW	UPPER(_00287_DS_)
000c70   22fb     addwfc  0xfb, 0x1, 0     	ADDWFC	PCLATU, F
000c72   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
000c74   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00287_DS_:
000c76   ef45     goto    0xc8a            	GOTO	_00245_DS_
000c78   f006
000c7a   ef72     goto    0xce4            	GOTO	_00249_DS_
000c7c   f006
000c7e   ef9f     goto    0xd3e            	GOTO	_00253_DS_
000c80   f006
000c82   efcc     goto    0xd98            	GOTO	_00257_DS_
000c84   f006
000c86   eff9     goto    0xdf2            	GOTO	_00261_DS_
000c88   f006
                                           _00245_DS_:
                                           ;	.line	367; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pA: if (state) TRISA=TRISA | mask[pin];
000c8a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000c8c   e015     bz      0xcb8            	BZ	_00247_DS_
000c8e   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000c90   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000c92   6e02     movwf   0x2, 0           	MOVWF	r0x02
000c94   6a03     clrf    0x3, 0           	CLRF	r0x03
000c96   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000c98   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000c9a   6a04     clrf    0x4, 0           	CLRF	r0x04
000c9c   0e00     movlw   0                	MOVLW	UPPER(_mask)
000c9e   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000ca0   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000ca2   fff6
000ca4   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000ca6   fff7
000ca8   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000caa   fff8
000cac   0009     tblrd   *+               	TBLRD*+	
000cae   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000cb0   f002
000cb2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000cb4   1292     iorwf   0x92, 0x1, 0     	IORWF	_TRISA, F
000cb6   d0c8     bra     0xe48            	BRA	_00266_DS_
                                           _00247_DS_:
                                           ;	.line	368; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else TRISA=TRISA & (255-mask[pin]);
000cb8   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000cba   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000cbc   6e02     movwf   0x2, 0           	MOVWF	r0x02
000cbe   6a03     clrf    0x3, 0           	CLRF	r0x03
000cc0   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000cc2   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000cc4   6a04     clrf    0x4, 0           	CLRF	r0x04
000cc6   0e00     movlw   0                	MOVLW	UPPER(_mask)
000cc8   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000cca   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000ccc   fff6
000cce   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000cd0   fff7
000cd2   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000cd4   fff8
000cd6   0009     tblrd   *+               	TBLRD*+	
000cd8   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000cda   f002
000cdc   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000cde   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000ce0   1692     andwf   0x92, 0x1, 0     	ANDWF	_TRISA, F
                                           ;	.line	369; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000ce2   d0b2     bra     0xe48            	BRA	_00266_DS_
                                           _00249_DS_:
                                           ;	.line	370; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pB: if (state) TRISB=TRISB | mask[pin];
000ce4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ce6   e015     bz      0xd12            	BZ	_00251_DS_
000ce8   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000cea   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000cec   6e02     movwf   0x2, 0           	MOVWF	r0x02
000cee   6a03     clrf    0x3, 0           	CLRF	r0x03
000cf0   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000cf2   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000cf4   6a04     clrf    0x4, 0           	CLRF	r0x04
000cf6   0e00     movlw   0                	MOVLW	UPPER(_mask)
000cf8   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000cfa   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000cfc   fff6
000cfe   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000d00   fff7
000d02   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000d04   fff8
000d06   0009     tblrd   *+               	TBLRD*+	
000d08   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000d0a   f002
000d0c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d0e   1293     iorwf   0x93, 0x1, 0     	IORWF	_TRISB, F
000d10   d09b     bra     0xe48            	BRA	_00266_DS_
                                           _00251_DS_:
                                           ;	.line	371; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else TRISB=TRISB & (255-mask[pin]);
000d12   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000d14   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000d16   6e02     movwf   0x2, 0           	MOVWF	r0x02
000d18   6a03     clrf    0x3, 0           	CLRF	r0x03
000d1a   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000d1c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000d1e   6a04     clrf    0x4, 0           	CLRF	r0x04
000d20   0e00     movlw   0                	MOVLW	UPPER(_mask)
000d22   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000d24   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000d26   fff6
000d28   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000d2a   fff7
000d2c   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000d2e   fff8
000d30   0009     tblrd   *+               	TBLRD*+	
000d32   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000d34   f002
000d36   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d38   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000d3a   1693     andwf   0x93, 0x1, 0     	ANDWF	_TRISB, F
                                           ;	.line	372; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000d3c   d085     bra     0xe48            	BRA	_00266_DS_
                                           _00253_DS_:
                                           ;	.line	373; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pC: if (state) TRISC=TRISC | mask[pin];
000d3e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000d40   e015     bz      0xd6c            	BZ	_00255_DS_
000d42   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000d44   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000d46   6e02     movwf   0x2, 0           	MOVWF	r0x02
000d48   6a03     clrf    0x3, 0           	CLRF	r0x03
000d4a   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000d4c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000d4e   6a04     clrf    0x4, 0           	CLRF	r0x04
000d50   0e00     movlw   0                	MOVLW	UPPER(_mask)
000d52   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000d54   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000d56   fff6
000d58   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000d5a   fff7
000d5c   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000d5e   fff8
000d60   0009     tblrd   *+               	TBLRD*+	
000d62   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000d64   f002
000d66   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d68   1294     iorwf   0x94, 0x1, 0     	IORWF	_TRISC, F
000d6a   d06e     bra     0xe48            	BRA	_00266_DS_
                                           _00255_DS_:
                                           ;	.line	374; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else TRISC=TRISC & (255-mask[pin]);
000d6c   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000d6e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000d70   6e02     movwf   0x2, 0           	MOVWF	r0x02
000d72   6a03     clrf    0x3, 0           	CLRF	r0x03
000d74   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000d76   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000d78   6a04     clrf    0x4, 0           	CLRF	r0x04
000d7a   0e00     movlw   0                	MOVLW	UPPER(_mask)
000d7c   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000d7e   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000d80   fff6
000d82   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000d84   fff7
000d86   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000d88   fff8
000d8a   0009     tblrd   *+               	TBLRD*+	
000d8c   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000d8e   f002
000d90   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000d92   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000d94   1694     andwf   0x94, 0x1, 0     	ANDWF	_TRISC, F
                                           ;	.line	375; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000d96   d058     bra     0xe48            	BRA	_00266_DS_
                                           _00257_DS_:
                                           ;	.line	379; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pD: if (state) TRISD=TRISD | mask[pin];
000d98   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000d9a   e015     bz      0xdc6            	BZ	_00259_DS_
000d9c   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000d9e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000da0   6e02     movwf   0x2, 0           	MOVWF	r0x02
000da2   6a03     clrf    0x3, 0           	CLRF	r0x03
000da4   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000da6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000da8   6a04     clrf    0x4, 0           	CLRF	r0x04
000daa   0e00     movlw   0                	MOVLW	UPPER(_mask)
000dac   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000dae   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000db0   fff6
000db2   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000db4   fff7
000db6   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000db8   fff8
000dba   0009     tblrd   *+               	TBLRD*+	
000dbc   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000dbe   f002
000dc0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000dc2   1295     iorwf   0x95, 0x1, 0     	IORWF	_TRISD, F
000dc4   d041     bra     0xe48            	BRA	_00266_DS_
                                           _00259_DS_:
                                           ;	.line	380; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else TRISD=TRISD & (255-mask[pin]);
000dc6   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000dc8   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000dca   6e02     movwf   0x2, 0           	MOVWF	r0x02
000dcc   6a03     clrf    0x3, 0           	CLRF	r0x03
000dce   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000dd0   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000dd2   6a04     clrf    0x4, 0           	CLRF	r0x04
000dd4   0e00     movlw   0                	MOVLW	UPPER(_mask)
000dd6   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000dd8   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000dda   fff6
000ddc   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000dde   fff7
000de0   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000de2   fff8
000de4   0009     tblrd   *+               	TBLRD*+	
000de6   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000de8   f002
000dea   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000dec   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000dee   1695     andwf   0x95, 0x1, 0     	ANDWF	_TRISD, F
                                           ;	.line	381; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000df0   d02b     bra     0xe48            	BRA	_00266_DS_
                                           _00261_DS_:
                                           ;	.line	382; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pE: if (state) TRISE=TRISE | mask[pin];
000df2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000df4   e015     bz      0xe20            	BZ	_00263_DS_
000df6   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000df8   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000dfa   6e01     movwf   0x1, 0           	MOVWF	r0x01
000dfc   6a02     clrf    0x2, 0           	CLRF	r0x02
000dfe   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000e00   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000e02   6a03     clrf    0x3, 0           	CLRF	r0x03
000e04   0e00     movlw   0                	MOVLW	UPPER(_mask)
000e06   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000e08   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
000e0a   fff6
000e0c   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
000e0e   fff7
000e10   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
000e12   fff8
000e14   0009     tblrd   *+               	TBLRD*+	
000e16   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
000e18   f001
000e1a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000e1c   1296     iorwf   0x96, 0x1, 0     	IORWF	_TRISE, F
000e1e   d014     bra     0xe48            	BRA	_00266_DS_
                                           _00263_DS_:
                                           ;	.line	383; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else TRISE=TRISE & (255-mask[pin]);
000e20   6a01     clrf    0x1, 0           	CLRF	r0x01
000e22   6a02     clrf    0x2, 0           	CLRF	r0x02
000e24   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000e26   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000e28   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000e2a   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
000e2c   0e00     movlw   0                	MOVLW	UPPER(_mask)
000e2e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000e30   c000     movff   0, 0xff6         	MOVFF	r0x00, TBLPTRL
000e32   fff6
000e34   c001     movff   0x1, 0xff7       	MOVFF	r0x01, TBLPTRH
000e36   fff7
000e38   c002     movff   0x2, 0xff8       	MOVFF	r0x02, TBLPTRU
000e3a   fff8
000e3c   0009     tblrd   *+               	TBLRD*+	
000e3e   cff5     movff   0xff5, 0         	MOVFF	TABLAT, r0x00
000e40   f000
000e42   5000     movf    0, 0, 0          	MOVF	r0x00, W
000e44   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
000e46   1696     andwf   0x96, 0x1, 0     	ANDWF	_TRISE, F
                                           _00266_DS_:
                                           ;	.line	386; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	}
000e48   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000e4a   f004
000e4c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000e4e   f003
000e50   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000e52   f002
000e54   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000e56   f001
000e58   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000e5a   f000
000e5c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000e5e   ffd9
000e60   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__digitalread	code
                                           _digitalread:
                                           ;	.line	314; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	unsigned char digitalread(unsigned char pin)
0010c0   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0010c2   ffe5
0010c4   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0010c6   ffd9
0010c8   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0010ca   ffe5
0010cc   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0010ce   ffe5
0010d0   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0010d2   ffe5
0010d4   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0010d6   ffe5
0010d8   0e02     movlw   0x2              	MOVLW	0x02
0010da   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0010dc   f000
                                           ;	.line	320; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	switch (port[pin])
0010de   0e24     movlw   0x24             	MOVLW	LOW(_port)
0010e0   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0010e2   6e01     movwf   0x1, 0           	MOVWF	r0x01
0010e4   6a02     clrf    0x2, 0           	CLRF	r0x02
0010e6   0e13     movlw   0x13             	MOVLW	HIGH(_port)
0010e8   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0010ea   6a03     clrf    0x3, 0           	CLRF	r0x03
0010ec   0e00     movlw   0                	MOVLW	UPPER(_port)
0010ee   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0010f0   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
0010f2   fff6
0010f4   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
0010f6   fff7
0010f8   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
0010fa   fff8
0010fc   0009     tblrd   *+               	TBLRD*+	
0010fe   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
001100   f001
001102   0e05     movlw   0x5              	MOVLW	0x05
001104   5c01     subwf   0x1, 0, 0        	SUBWF	r0x01, W
001106   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
001108   d09a     bra     0x123e           	BRA	_00218_DS_
00110a   6afa     clrf    0xfa, 0          	CLRF	PCLATH
00110c   6afb     clrf    0xfb, 0          	CLRF	PCLATU
00110e   3401     rlcf    0x1, 0, 0        	RLCF	r0x01, W
001110   36fa     rlcf    0xfa, 0x1, 0     	RLCF	PCLATH, F
001112   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
001114   36fa     rlcf    0xfa, 0x1, 0     	RLCF	PCLATH, F
001116   0bfc     andlw   0xfc             	ANDLW	0xfc
001118   0f28     addlw   0x28             	ADDLW	LOW(_00240_DS_)
00111a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00111c   0e11     movlw   0x11             	MOVLW	HIGH(_00240_DS_)
00111e   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
001120   0e00     movlw   0                	MOVLW	UPPER(_00240_DS_)
001122   22fb     addwfc  0xfb, 0x1, 0     	ADDWFC	PCLATU, F
001124   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
001126   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00240_DS_:
001128   ef9e     goto    0x113c           	GOTO	_00198_DS_
00112a   f008
00112c   efb8     goto    0x1170           	GOTO	_00202_DS_
00112e   f008
001130   efd2     goto    0x11a4           	GOTO	_00206_DS_
001132   f008
001134   efec     goto    0x11d8           	GOTO	_00210_DS_
001136   f008
001138   ef06     goto    0x120c           	GOTO	_00214_DS_
00113a   f009
                                           _00198_DS_:
                                           ;	.line	322; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pA: if ((PORTA & mask[pin])!=0) return (1);
00113c   0e04     movlw   0x4              	MOVLW	LOW(_mask)
00113e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
001140   6e01     movwf   0x1, 0           	MOVWF	r0x01
001142   6a02     clrf    0x2, 0           	CLRF	r0x02
001144   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
001146   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001148   6a03     clrf    0x3, 0           	CLRF	r0x03
00114a   0e00     movlw   0                	MOVLW	UPPER(_mask)
00114c   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
00114e   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
001150   fff6
001152   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
001154   fff7
001156   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
001158   fff8
00115a   0009     tblrd   *+               	TBLRD*+	
00115c   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
00115e   f001
001160   5080     movf    0x80, 0, 0       	MOVF	_PORTA, W
001162   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
001164   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001166   e002     bz      0x116c           	BZ	_00200_DS_
001168   0e01     movlw   0x1              	MOVLW	0x01
00116a   d06a     bra     0x1240           	BRA	_00219_DS_
                                           _00200_DS_:
                                           ;	.line	323; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else return (0);
00116c   6ae8     clrf    0xe8, 0          	CLRF	WREG
00116e   d068     bra     0x1240           	BRA	_00219_DS_
                                           _00202_DS_:
                                           ;	.line	325; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pB: if ((PORTB & mask[pin])!=0) return (1);
001170   0e04     movlw   0x4              	MOVLW	LOW(_mask)
001172   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
001174   6e01     movwf   0x1, 0           	MOVWF	r0x01
001176   6a02     clrf    0x2, 0           	CLRF	r0x02
001178   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
00117a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00117c   6a03     clrf    0x3, 0           	CLRF	r0x03
00117e   0e00     movlw   0                	MOVLW	UPPER(_mask)
001180   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001182   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
001184   fff6
001186   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
001188   fff7
00118a   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
00118c   fff8
00118e   0009     tblrd   *+               	TBLRD*+	
001190   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
001192   f001
001194   5081     movf    0x81, 0, 0       	MOVF	_PORTB, W
001196   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
001198   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00119a   e002     bz      0x11a0           	BZ	_00204_DS_
00119c   0e01     movlw   0x1              	MOVLW	0x01
00119e   d050     bra     0x1240           	BRA	_00219_DS_
                                           _00204_DS_:
                                           ;	.line	326; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else return (0);
0011a0   6ae8     clrf    0xe8, 0          	CLRF	WREG
0011a2   d04e     bra     0x1240           	BRA	_00219_DS_
                                           _00206_DS_:
                                           ;	.line	328; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pC: if ((PORTC & mask[pin])!=0) return (1);
0011a4   0e04     movlw   0x4              	MOVLW	LOW(_mask)
0011a6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0011a8   6e01     movwf   0x1, 0           	MOVWF	r0x01
0011aa   6a02     clrf    0x2, 0           	CLRF	r0x02
0011ac   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
0011ae   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0011b0   6a03     clrf    0x3, 0           	CLRF	r0x03
0011b2   0e00     movlw   0                	MOVLW	UPPER(_mask)
0011b4   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0011b6   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
0011b8   fff6
0011ba   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
0011bc   fff7
0011be   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
0011c0   fff8
0011c2   0009     tblrd   *+               	TBLRD*+	
0011c4   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
0011c6   f001
0011c8   5082     movf    0x82, 0, 0       	MOVF	_PORTC, W
0011ca   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
0011cc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0011ce   e002     bz      0x11d4           	BZ	_00208_DS_
0011d0   0e01     movlw   0x1              	MOVLW	0x01
0011d2   d036     bra     0x1240           	BRA	_00219_DS_
                                           _00208_DS_:
                                           ;	.line	329; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else return (0);
0011d4   6ae8     clrf    0xe8, 0          	CLRF	WREG
0011d6   d034     bra     0x1240           	BRA	_00219_DS_
                                           _00210_DS_:
                                           ;	.line	334; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pD: if ((PORTD & mask[pin])!=0) return (1);
0011d8   0e04     movlw   0x4              	MOVLW	LOW(_mask)
0011da   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0011dc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0011de   6a02     clrf    0x2, 0           	CLRF	r0x02
0011e0   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
0011e2   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0011e4   6a03     clrf    0x3, 0           	CLRF	r0x03
0011e6   0e00     movlw   0                	MOVLW	UPPER(_mask)
0011e8   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
0011ea   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
0011ec   fff6
0011ee   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
0011f0   fff7
0011f2   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
0011f4   fff8
0011f6   0009     tblrd   *+               	TBLRD*+	
0011f8   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
0011fa   f001
0011fc   5083     movf    0x83, 0, 0       	MOVF	_PORTD, W
0011fe   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
001200   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001202   e002     bz      0x1208           	BZ	_00212_DS_
001204   0e01     movlw   0x1              	MOVLW	0x01
001206   d01c     bra     0x1240           	BRA	_00219_DS_
                                           _00212_DS_:
                                           ;	.line	335; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else return (0);
001208   6ae8     clrf    0xe8, 0          	CLRF	WREG
00120a   d01a     bra     0x1240           	BRA	_00219_DS_
                                           _00214_DS_:
                                           ;	.line	337; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pE: if ((PORTE & mask[pin])!=0) return (1);
00120c   6a01     clrf    0x1, 0           	CLRF	r0x01
00120e   6a02     clrf    0x2, 0           	CLRF	r0x02
001210   0e04     movlw   0x4              	MOVLW	LOW(_mask)
001212   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001214   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
001216   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
001218   0e00     movlw   0                	MOVLW	UPPER(_mask)
00121a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00121c   c000     movff   0, 0xff6         	MOVFF	r0x00, TBLPTRL
00121e   fff6
001220   c001     movff   0x1, 0xff7       	MOVFF	r0x01, TBLPTRH
001222   fff7
001224   c002     movff   0x2, 0xff8       	MOVFF	r0x02, TBLPTRU
001226   fff8
001228   0009     tblrd   *+               	TBLRD*+	
00122a   cff5     movff   0xff5, 0         	MOVFF	TABLAT, r0x00
00122c   f000
00122e   5084     movf    0x84, 0, 0       	MOVF	_PORTE, W
001230   1600     andwf   0, 0x1, 0        	ANDWF	r0x00, F
001232   5000     movf    0, 0, 0          	MOVF	r0x00, W
001234   e002     bz      0x123a           	BZ	_00216_DS_
001236   0e01     movlw   0x1              	MOVLW	0x01
001238   d003     bra     0x1240           	BRA	_00219_DS_
                                           _00216_DS_:
                                           ;	.line	338; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else return (0);
00123a   6ae8     clrf    0xe8, 0          	CLRF	WREG
00123c   d001     bra     0x1240           	BRA	_00219_DS_
                                           _00218_DS_:
                                           ;	.line	342; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	return (0);
00123e   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00219_DS_:
001240   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001242   f003
001244   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001246   f002
001248   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00124a   f001
00124c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00124e   f000
001250   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001252   ffd9
001254   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__digitalwrite	code
                                           _digitalwrite:
                                           ;	.line	266; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	void digitalwrite(unsigned char pin, unsigned char state)
000e62   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000e64   ffe5
000e66   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000e68   ffd9
000e6a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000e6c   ffe5
000e6e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000e70   ffe5
000e72   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000e74   ffe5
000e76   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000e78   ffe5
000e7a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000e7c   ffe5
000e7e   0e02     movlw   0x2              	MOVLW	0x02
000e80   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000e82   f000
000e84   0e03     movlw   0x3              	MOVLW	0x03
000e86   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000e88   f001
                                           ;	.line	272; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	switch (port[pin])
000e8a   0e24     movlw   0x24             	MOVLW	LOW(_port)
000e8c   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000e8e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000e90   6a03     clrf    0x3, 0           	CLRF	r0x03
000e92   0e13     movlw   0x13             	MOVLW	HIGH(_port)
000e94   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000e96   6a04     clrf    0x4, 0           	CLRF	r0x04
000e98   0e00     movlw   0                	MOVLW	UPPER(_port)
000e9a   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000e9c   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000e9e   fff6
000ea0   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000ea2   fff7
000ea4   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000ea6   fff8
000ea8   0009     tblrd   *+               	TBLRD*+	
000eaa   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000eac   f002
000eae   0e05     movlw   0x5              	MOVLW	0x05
000eb0   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
000eb2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000eb4   d0f8     bra     0x10a6           	BRA	_00172_DS_
000eb6   6afa     clrf    0xfa, 0          	CLRF	PCLATH
000eb8   6afb     clrf    0xfb, 0          	CLRF	PCLATU
000eba   3402     rlcf    0x2, 0, 0        	RLCF	r0x02, W
000ebc   36fa     rlcf    0xfa, 0x1, 0     	RLCF	PCLATH, F
000ebe   34e8     rlcf    0xe8, 0, 0       	RLCF	WREG, W
000ec0   36fa     rlcf    0xfa, 0x1, 0     	RLCF	PCLATH, F
000ec2   0bfc     andlw   0xfc             	ANDLW	0xfc
000ec4   0fd4     addlw   0xd4             	ADDLW	LOW(_00193_DS_)
000ec6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ec8   0e0e     movlw   0xe              	MOVLW	HIGH(_00193_DS_)
000eca   22fa     addwfc  0xfa, 0x1, 0     	ADDWFC	PCLATH, F
000ecc   0e00     movlw   0                	MOVLW	UPPER(_00193_DS_)
000ece   22fb     addwfc  0xfb, 0x1, 0     	ADDWFC	PCLATU, F
000ed0   50e4     movf    0xe4, 0, 0       	MOVF	PREINC1, W
000ed2   6ef9     movwf   0xf9, 0          	MOVWF	PCL
                                           _00193_DS_:
000ed4   ef74     goto    0xee8            	GOTO	_00151_DS_
000ed6   f007
000ed8   efa1     goto    0xf42            	GOTO	_00155_DS_
000eda   f007
000edc   efce     goto    0xf9c            	GOTO	_00159_DS_
000ede   f007
000ee0   effb     goto    0xff6            	GOTO	_00163_DS_
000ee2   f007
000ee4   ef28     goto    0x1050           	GOTO	_00167_DS_
000ee6   f008
                                           _00151_DS_:
                                           ;	.line	274; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pA: if (state) LATA=LATA | mask[pin];
000ee8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000eea   e015     bz      0xf16            	BZ	_00153_DS_
000eec   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000eee   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000ef0   6e02     movwf   0x2, 0           	MOVWF	r0x02
000ef2   6a03     clrf    0x3, 0           	CLRF	r0x03
000ef4   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000ef6   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000ef8   6a04     clrf    0x4, 0           	CLRF	r0x04
000efa   0e00     movlw   0                	MOVLW	UPPER(_mask)
000efc   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000efe   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000f00   fff6
000f02   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000f04   fff7
000f06   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000f08   fff8
000f0a   0009     tblrd   *+               	TBLRD*+	
000f0c   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000f0e   f002
000f10   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000f12   1289     iorwf   0x89, 0x1, 0     	IORWF	_LATA, F
000f14   d0c8     bra     0x10a6           	BRA	_00172_DS_
                                           _00153_DS_:
                                           ;	.line	275; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else LATA=LATA & (255-mask[pin]);
000f16   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000f18   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000f1a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000f1c   6a03     clrf    0x3, 0           	CLRF	r0x03
000f1e   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000f20   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000f22   6a04     clrf    0x4, 0           	CLRF	r0x04
000f24   0e00     movlw   0                	MOVLW	UPPER(_mask)
000f26   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000f28   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000f2a   fff6
000f2c   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000f2e   fff7
000f30   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000f32   fff8
000f34   0009     tblrd   *+               	TBLRD*+	
000f36   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000f38   f002
000f3a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000f3c   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000f3e   1689     andwf   0x89, 0x1, 0     	ANDWF	_LATA, F
                                           ;	.line	276; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000f40   d0b2     bra     0x10a6           	BRA	_00172_DS_
                                           _00155_DS_:
                                           ;	.line	277; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pB: if (state) LATB=LATB | mask[pin]; 
000f42   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000f44   e015     bz      0xf70            	BZ	_00157_DS_
000f46   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000f48   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000f4a   6e02     movwf   0x2, 0           	MOVWF	r0x02
000f4c   6a03     clrf    0x3, 0           	CLRF	r0x03
000f4e   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000f50   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000f52   6a04     clrf    0x4, 0           	CLRF	r0x04
000f54   0e00     movlw   0                	MOVLW	UPPER(_mask)
000f56   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000f58   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000f5a   fff6
000f5c   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000f5e   fff7
000f60   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000f62   fff8
000f64   0009     tblrd   *+               	TBLRD*+	
000f66   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000f68   f002
000f6a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000f6c   128a     iorwf   0x8a, 0x1, 0     	IORWF	_LATB, F
000f6e   d09b     bra     0x10a6           	BRA	_00172_DS_
                                           _00157_DS_:
                                           ;	.line	278; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else LATB=LATB & (255-mask[pin]);
000f70   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000f72   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000f74   6e02     movwf   0x2, 0           	MOVWF	r0x02
000f76   6a03     clrf    0x3, 0           	CLRF	r0x03
000f78   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000f7a   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000f7c   6a04     clrf    0x4, 0           	CLRF	r0x04
000f7e   0e00     movlw   0                	MOVLW	UPPER(_mask)
000f80   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000f82   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000f84   fff6
000f86   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000f88   fff7
000f8a   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000f8c   fff8
000f8e   0009     tblrd   *+               	TBLRD*+	
000f90   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000f92   f002
000f94   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000f96   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000f98   168a     andwf   0x8a, 0x1, 0     	ANDWF	_LATB, F
                                           ;	.line	279; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000f9a   d085     bra     0x10a6           	BRA	_00172_DS_
                                           _00159_DS_:
                                           ;	.line	280; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pC: if (state) LATC=LATC | mask[pin];
000f9c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000f9e   e015     bz      0xfca            	BZ	_00161_DS_
000fa0   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000fa2   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000fa4   6e02     movwf   0x2, 0           	MOVWF	r0x02
000fa6   6a03     clrf    0x3, 0           	CLRF	r0x03
000fa8   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000faa   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000fac   6a04     clrf    0x4, 0           	CLRF	r0x04
000fae   0e00     movlw   0                	MOVLW	UPPER(_mask)
000fb0   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000fb2   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000fb4   fff6
000fb6   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000fb8   fff7
000fba   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000fbc   fff8
000fbe   0009     tblrd   *+               	TBLRD*+	
000fc0   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000fc2   f002
000fc4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000fc6   128b     iorwf   0x8b, 0x1, 0     	IORWF	_LATC, F
000fc8   d06e     bra     0x10a6           	BRA	_00172_DS_
                                           _00161_DS_:
                                           ;	.line	281; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else LATC=LATC & (255-mask[pin]);
000fca   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000fcc   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000fce   6e02     movwf   0x2, 0           	MOVWF	r0x02
000fd0   6a03     clrf    0x3, 0           	CLRF	r0x03
000fd2   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
000fd4   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000fd6   6a04     clrf    0x4, 0           	CLRF	r0x04
000fd8   0e00     movlw   0                	MOVLW	UPPER(_mask)
000fda   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
000fdc   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
000fde   fff6
000fe0   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
000fe2   fff7
000fe4   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
000fe6   fff8
000fe8   0009     tblrd   *+               	TBLRD*+	
000fea   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
000fec   f002
000fee   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ff0   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
000ff2   168b     andwf   0x8b, 0x1, 0     	ANDWF	_LATC, F
                                           ;	.line	282; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
000ff4   d058     bra     0x10a6           	BRA	_00172_DS_
                                           _00163_DS_:
                                           ;	.line	286; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pD: if (state) LATD=LATD | mask[pin]; 
000ff6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000ff8   e015     bz      0x1024           	BZ	_00165_DS_
000ffa   0e04     movlw   0x4              	MOVLW	LOW(_mask)
000ffc   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000ffe   6e02     movwf   0x2, 0           	MOVWF	r0x02
001000   6a03     clrf    0x3, 0           	CLRF	r0x03
001002   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
001004   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001006   6a04     clrf    0x4, 0           	CLRF	r0x04
001008   0e00     movlw   0                	MOVLW	UPPER(_mask)
00100a   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
00100c   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
00100e   fff6
001010   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
001012   fff7
001014   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
001016   fff8
001018   0009     tblrd   *+               	TBLRD*+	
00101a   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
00101c   f002
00101e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
001020   128c     iorwf   0x8c, 0x1, 0     	IORWF	_LATD, F
001022   d041     bra     0x10a6           	BRA	_00172_DS_
                                           _00165_DS_:
                                           ;	.line	287; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else LATD=LATD & (255-mask[pin]);
001024   0e04     movlw   0x4              	MOVLW	LOW(_mask)
001026   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
001028   6e02     movwf   0x2, 0           	MOVWF	r0x02
00102a   6a03     clrf    0x3, 0           	CLRF	r0x03
00102c   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
00102e   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001030   6a04     clrf    0x4, 0           	CLRF	r0x04
001032   0e00     movlw   0                	MOVLW	UPPER(_mask)
001034   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
001036   c002     movff   0x2, 0xff6       	MOVFF	r0x02, TBLPTRL
001038   fff6
00103a   c003     movff   0x3, 0xff7       	MOVFF	r0x03, TBLPTRH
00103c   fff7
00103e   c004     movff   0x4, 0xff8       	MOVFF	r0x04, TBLPTRU
001040   fff8
001042   0009     tblrd   *+               	TBLRD*+	
001044   cff5     movff   0xff5, 0x2       	MOVFF	TABLAT, r0x02
001046   f002
001048   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00104a   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
00104c   168c     andwf   0x8c, 0x1, 0     	ANDWF	_LATD, F
                                           ;	.line	288; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	break;
00104e   d02b     bra     0x10a6           	BRA	_00172_DS_
                                           _00167_DS_:
                                           ;	.line	289; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	case pE: if (state) LATE=LATE | mask[pin]; 
001050   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001052   e015     bz      0x107e           	BZ	_00169_DS_
001054   0e04     movlw   0x4              	MOVLW	LOW(_mask)
001056   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
001058   6e01     movwf   0x1, 0           	MOVWF	r0x01
00105a   6a02     clrf    0x2, 0           	CLRF	r0x02
00105c   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
00105e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
001060   6a03     clrf    0x3, 0           	CLRF	r0x03
001062   0e00     movlw   0                	MOVLW	UPPER(_mask)
001064   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
001066   c001     movff   0x1, 0xff6       	MOVFF	r0x01, TBLPTRL
001068   fff6
00106a   c002     movff   0x2, 0xff7       	MOVFF	r0x02, TBLPTRH
00106c   fff7
00106e   c003     movff   0x3, 0xff8       	MOVFF	r0x03, TBLPTRU
001070   fff8
001072   0009     tblrd   *+               	TBLRD*+	
001074   cff5     movff   0xff5, 0x1       	MOVFF	TABLAT, r0x01
001076   f001
001078   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00107a   128d     iorwf   0x8d, 0x1, 0     	IORWF	_LATE, F
00107c   d014     bra     0x10a6           	BRA	_00172_DS_
                                           _00169_DS_:
                                           ;	.line	290; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	else LATE=LATE & (255-mask[pin]);
00107e   6a01     clrf    0x1, 0           	CLRF	r0x01
001080   6a02     clrf    0x2, 0           	CLRF	r0x02
001082   0e04     movlw   0x4              	MOVLW	LOW(_mask)
001084   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
001086   0e13     movlw   0x13             	MOVLW	HIGH(_mask)
001088   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
00108a   0e00     movlw   0                	MOVLW	UPPER(_mask)
00108c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00108e   c000     movff   0, 0xff6         	MOVFF	r0x00, TBLPTRL
001090   fff6
001092   c001     movff   0x1, 0xff7       	MOVFF	r0x01, TBLPTRH
001094   fff7
001096   c002     movff   0x2, 0xff8       	MOVFF	r0x02, TBLPTRU
001098   fff8
00109a   0009     tblrd   *+               	TBLRD*+	
00109c   cff5     movff   0xff5, 0         	MOVFF	TABLAT, r0x00
00109e   f000
0010a0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0010a2   08ff     sublw   0xff             	SUBLW	0xff
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
0010a4   168d     andwf   0x8d, 0x1, 0     	ANDWF	_LATE, F
                                           _00172_DS_:
                                           ;	.line	293; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/digitalw.c	}
0010a6   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0010a8   f004
0010aa   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0010ac   f003
0010ae   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0010b0   f002
0010b2   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0010b4   f001
0010b6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0010b8   f000
0010ba   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0010bc   ffd9
0010be   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Delayus	code
                                           _Delayus:
                                           ;	.line	86; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/delay.c	void Delayus(unsigned int microseconds)
0013d8   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0013da   ffe5
0013dc   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0013de   ffd9
0013e0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0013e2   ffe5
0013e4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0013e6   ffe5
0013e8   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0013ea   ffe5
0013ec   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0013ee   ffe5
0013f0   0e02     movlw   0x2              	MOVLW	0x02
0013f2   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0013f4   f000
0013f6   0e03     movlw   0x3              	MOVLW	0x03
0013f8   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0013fa   f001
                                           ;	.line	90; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/delay.c	for (i=0; i<microseconds; i++)
0013fc   6a02     clrf    0x2, 0           	CLRF	r0x02
0013fe   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00135_DS_:
001400   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
001402   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
001404   e102     bnz     0x140a           	BNZ	_00146_DS_
001406   5000     movf    0, 0, 0          	MOVF	r0x00, W
001408   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00146_DS_:
00140a   e203     bc      0x1412           	BC	_00137_DS_
00140c   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
00140e   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
001410   d7f7     bra     0x1400           	BRA	_00135_DS_
                                           _00137_DS_:
001412   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
001414   f003
001416   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
001418   f002
00141a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00141c   f001
00141e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
001420   f000
001422   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
001424   ffd9
001426   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Delayms	code
                                           _Delayms:
                                           ;	.line	78; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/delay.c	void Delayms(unsigned int milliseconds)
001382   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
001384   ffe5
001386   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
001388   ffd9
00138a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00138c   ffe5
00138e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
001390   ffe5
001392   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
001394   ffe5
001396   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
001398   ffe5
00139a   0e02     movlw   0x2              	MOVLW	0x02
00139c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00139e   f000
0013a0   0e03     movlw   0x3              	MOVLW	0x03
0013a2   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0013a4   f001
                                           ;	.line	82; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/delay.c	for (i=0; i<milliseconds; i++)
0013a6   6a02     clrf    0x2, 0           	CLRF	r0x02
0013a8   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00117_DS_:
0013aa   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0013ac   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0013ae   e102     bnz     0x13b4           	BNZ	_00128_DS_
0013b0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0013b2   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00128_DS_:
0013b4   e206     bc      0x13c2           	BC	_00119_DS_
                                           ;	.line	83; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/delay.c	delay1ktcy(12);
0013b6   0e0c     movlw   0xc              	MOVLW	0x0c
0013b8   eca2     call    0x1344, 0        	CALL	_delay1ktcy
0013ba   f009
                                           ;	.line	82; /dvpt/pinguino/svn/ide/x.4/p8/pinguino/core/delay.c	for (i=0; i<milliseconds; i++)
0013bc   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
0013be   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0013c0   d7f4     bra     0x13aa           	BRA	_00117_DS_
                                           _00119_DS_:
0013c2   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0013c4   f003
0013c6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0013c8   f002
0013ca   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0013cc   f001
0013ce   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0013d0   f000
0013d2   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0013d4   ffd9
0013d6   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main___startup	code
                                           __startup:
                                           	; Initialize the stack pointer
001256   ee14     lfsr    0x1, 0x4ff       	lfsr 1, _stack_end
001258   f0ff
00125a   ee24     lfsr    0x2, 0x4ff       	lfsr 2, _stack_end
00125c   f0ff
                                           	; 1st silicon does not do this on POR
00125e   6af8     clrf    0xf8, 0          	clrf _TBLPTRU, 0
                                           	; Initialize the flash memory access configuration.
                                           	; This is harmless for non-flash devices, so we do it on all parts.
001260   8ea6     bsf     0xa6, 0x7, 0     	bsf 0xa6, 7, 0 ; EECON1.EEPGD = 1, TBLPTR accesses program memory
001262   9ca6     bcf     0xa6, 0x6, 0     	bcf 0xa6, 6, 0 ; EECON1.CFGS = 0, TBLPTR accesses program memory
                                           	; Load FSR0 with top of RAM.
001264   0ebf     movlw   0xbf             	movlw 0xbf
001266   6ee9     movwf   0xe9, 0          	movwf _FSR0L, 0
001268   0e0e     movlw   0xe              	movlw 0x0e
00126a   6eea     movwf   0xea, 0          	movwf _FSR0H, 0
                                           	; Place 0xff at address 0x00 as a sentinel.
00126c   6800     setf    0, 0             	setf 0x00, 0
                                           clear_loop:
00126e   6aed     clrf    0xed, 0          	clrf _POSTDEC0, 0
001270   5000     movf    0, 0, 0          	movf 0x00, w, 0
001272   e1fd     bnz     0x126e           	bnz clear_loop
                                           	; TBLPTR = &cinit
001274   0e36     movlw   0x36             	movlw low(_cinit)
001276   6ef6     movwf   0xf6, 0          	movwf _TBLPTRL, 0
001278   0e15     movlw   0x15             	movlw high(_cinit)
00127a   6ef7     movwf   0xf7, 0          	movwf _TBLPTRH, 0
00127c   0e00     movlw   0                	movlw upper(_cinit)
00127e   6ef8     movwf   0xf8, 0          	movwf _TBLPTRU, 0
                                           	; 0x05 = cinit.num_init
001280   0009     tblrd   *+               	tblrd*+
001282   cff5     movff   0xff5, 0x5       	movff _TABLAT, 0x05
001284   f005
001286   0009     tblrd   *+               	tblrd*+
001288   cff5     movff   0xff5, 0x6       	movff _TABLAT, (0x05 + 1)
00128a   f006
                                           	; while (0x05)
00128c   d034     bra     0x12f6           	bra entry_loop_dec
                                           entry_loop:
                                           	; Count down so we only have to look up the data in _cinit once.
                                           	; At this point we know that TBLPTR points to the top of the current
                                           	; entry in _cinit, so we can just start reading the from, to, and
                                           	; size values.
                                           	; Read the source address low.
                                           	; 0x00 = 0x07 ->from;
00128e   0009     tblrd   *+               	tblrd*+
001290   cff5     movff   0xff5, 0         	movff _TABLAT, 0x00
001292   f000
                                           	; source address high
001294   0009     tblrd   *+               	tblrd*+
001296   cff5     movff   0xff5, 0x1       	movff _TABLAT, (0x00 + 1)
001298   f001
                                           	; source address upper
00129a   0009     tblrd   *+               	tblrd*+
00129c   cff5     movff   0xff5, 0x2       	movff _TABLAT, (0x00 + 2)
00129e   f002
                                           	; Skip a byte since it is stored as a 32bit int.
0012a0   0009     tblrd   *+               	tblrd*+
                                           	; Read the destination address directly into FSR0
                                           	; destination address low.
                                           	; FSR0 = (unsigned short)0x07 ->to;
0012a2   0009     tblrd   *+               	tblrd*+
0012a4   cff5     movff   0xff5, 0xfe9     	movff _TABLAT, _FSR0L
0012a6   ffe9
                                           	; destination address high
0012a8   0009     tblrd   *+               	tblrd*+
0012aa   cff5     movff   0xff5, 0xfea     	movff _TABLAT, _FSR0H
0012ac   ffea
                                           	; Skip two bytes since it is stored as a 32bit int.
0012ae   0009     tblrd   *+               	tblrd*+
0012b0   0009     tblrd   *+               	tblrd*+
                                           	; Read the size of data to transfer to destination address.
                                           	; 0x03 = (unsigned short)0x07 ->size;
0012b2   0009     tblrd   *+               	tblrd*+
0012b4   cff5     movff   0xff5, 0x3       	movff _TABLAT, 0x03
0012b6   f003
0012b8   0009     tblrd   *+               	tblrd*+
0012ba   cff5     movff   0xff5, 0x4       	movff _TABLAT, (0x03 + 1)
0012bc   f004
                                           	; Skip two bytes since it is stored as a 32bit int.
0012be   0009     tblrd   *+               	tblrd*+
0012c0   0009     tblrd   *+               	tblrd*+
                                           	; 0x00 = 0x07 ->from;
                                           	; FSR0 = (unsigned short)0x07 ->to;
                                           	; 0x03 = (unsigned short)0x07 ->size;
                                           	; The table pointer now points to the next entry. Save it
                                           	; off since we will be using the table pointer to do the copying
                                           	; for the entry.
                                           	; 0x07 = TBLPTR
0012c2   cff6     movff   0xff6, 0x7       	movff _TBLPTRL, 0x07
0012c4   f007
0012c6   cff7     movff   0xff7, 0x8       	movff _TBLPTRH, (0x07 + 1)
0012c8   f008
0012ca   cff8     movff   0xff8, 0x9       	movff _TBLPTRU, (0x07 + 2)
0012cc   f009
                                           	; Now assign the source address to the table pointer.
                                           	; TBLPTR = 0x00
0012ce   c000     movff   0, 0xff6         	movff 0x00, _TBLPTRL
0012d0   fff6
0012d2   c001     movff   0x1, 0xff7       	movff (0x00 + 1), _TBLPTRH
0012d4   fff7
0012d6   c002     movff   0x2, 0xff8       	movff (0x00 + 2), _TBLPTRU
0012d8   fff8
0012da   d003     bra     0x12e2           	bra copy_loop_dec
                                           copy_loop:
0012dc   0009     tblrd   *+               	tblrd*+
0012de   cff5     movff   0xff5, 0xfee     	movff _TABLAT, _POSTINC0
0012e0   ffee
                                           copy_loop_dec:
                                           	; while (--0x03);
                                           	; Decrement and test the byte counter.
                                           	; The cycle ends when the value of counter reaches the -1.
0012e2   0603     decf    0x3, 0x1, 0      	decf 0x03, f, 0
0012e4   e2fb     bc      0x12dc           	bc copy_loop
0012e6   0604     decf    0x4, 0x1, 0      	decf (0x03 + 1), f, 0
0012e8   e2f9     bc      0x12dc           	bc copy_loop
                                           	; Restore the table pointer for the next entry.
                                           	; TBLPTR = 0x07
0012ea   c007     movff   0x7, 0xff6       	movff 0x07, _TBLPTRL
0012ec   fff6
0012ee   c008     movff   0x8, 0xff7       	movff (0x07 + 1), _TBLPTRH
0012f0   fff7
0012f2   c009     movff   0x9, 0xff8       	movff (0x07 + 2), _TBLPTRU
0012f4   fff8
                                           entry_loop_dec:
                                           	; while (--0x05);
                                           	; Decrement and test the entry counter.
                                           	; The cycle ends when the value of counter reaches the -1.
0012f6   0605     decf    0x5, 0x1, 0      	decf 0x05, f, 0
0012f8   e2ca     bc      0x128e           	bc entry_loop
0012fa   0606     decf    0x6, 0x1, 0      	decf (0x05 + 1), f, 0
0012fc   e2c8     bc      0x128e           	bc entry_loop
                                           	
                                           ;	.line	259; /dvpt/pinguino/svn/ide/x.4/source/crt0iz.c	main ();
0012fe   ec14     call    0x1428, 0        	CALL	_main
001300   f00a
                                           lockup:
                                           	; Returning from main will lock up.
001302   d7ff     bra     0x1302           	bra lockup
                                           	
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _mask:
001304   0201     mulwf   0x1, 0           	DB	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08
001306   0804     sublw   0x4              
001308   2010     addwfc  0x10, 0, 0       
00130a   8040     bsf     0x40, 0, 0       
00130c   0201     mulwf   0x1, 0           
00130e   0804     sublw   0x4              
001310   0110     movlb   0x10             	DB	0x10, 0x01, 0x02, 0x04, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
001312   0402     decf    0x2, 0, 0        
001314   0201     mulwf   0x1, 0           
001316   0804     sublw   0x4              
001318   2010     addwfc  0x10, 0, 0       
00131a   8040     bsf     0x40, 0, 0       
00131c   0201     mulwf   0x1, 0           	DB	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
00131e   0804     sublw   0x4              
001320   2010     addwfc  0x10, 0, 0       
001322   8040     bsf     0x40, 0, 0       
                                           ; ; Starting pCode block for Ival
                                           _port:
001324   0101     movlb   0x1              	DB	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00
001326   0101     movlb   0x1              
001328   0101     movlb   0x1              
00132a   0101     movlb   0x1              
00132c   0000     nop                      
00132e   0000     nop                      
001330   0400     decf    0, 0, 0          	DB	0x00, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
001332   0404     decf    0x4, 0, 0        
001334   0202     mulwf   0x2, 0           
001336   0202     mulwf   0x2, 0           
001338   0202     mulwf   0x2, 0           
00133a   0202     mulwf   0x2, 0           
00133c   0303     mulwf   0x3, 0x1         	DB	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
00133e   0303     mulwf   0x3, 0x1         
001340   0303     mulwf   0x3, 0x1         
001342   0303     mulwf   0x3, 0x1         
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2320 (0x0910) bytes ( 1.77%)
                                           ;           	 1160 (0x0488) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    5 (0x0005) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  delay1ktcy.S
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas at otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                                   include <p18fxxx.inc>
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1
                                           
                                           
                                           		list	r=dec, n=96, st=off, mm=off
                                           
                                           	        nolist
                                           #endif
                                           
                                                   extern  _delay10tcy
                                           
                                                   global  _delay1ktcy
                                               
                                                   code
                                           
                                           _delay1ktcy:
                                                   ; polynomial for 1ktcy delay is f(x) = 1000 * (x-1) + 1000
001344   06e8     decf    0xe8, 0x1, 0             decf    WREG, f
                                           
001346   6ee5     movwf   0xe5, 0                  movwf   POSTDEC1
001348   0e63     movlw   0x63                     movlw    99
00134a   ecb5     call    0x136a, 0                call    _delay10tcy
00134c   f009
                                           
00134e   50e4     movf    0xe4, 0, 0               movf    PREINC1, w
                                            
001350   e00b     bz      0x1368                   bz      @delay1k_end
001352   d000     bra     0x1354                   bra     $+2
                                               
                                           @delay1k_loop:
001354   6ee5     movwf   0xe5, 0                  movwf   POSTDEC1
001356   0e63     movlw   0x63                     movlw   99
001358   ecb5     call    0x136a, 0                call    _delay10tcy
00135a   f009
                                           
00135c   d000     bra     0x135e                   bra     $+2
00135e   d000     bra     0x1360                   bra     $+2
001360   0000     nop                              nop
                                           
001362   50e4     movf    0xe4, 0, 0               movf    PREINC1, w
001364   2ee8     decfsz  0xe8, 0x1, 0             decfsz  WREG, f
001366   d7f6     bra     0x1354                   bra     @delay1k_loop
                                           
                                           @delay1k_end:
001368   0012     return  0                        return
                                           
                                                   end
                                           ;--------------------------------------------------------------------------
                                           ;  delay10tcy.S
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas at otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                               include <p18fxxx.inc>
                                           ;--------------------------------------------------------------------------
                                           ;  p18fxxx.inc
                                           ;
                                           ;  Copyright (C) 2005, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                           #ifndef __P18FXXX__
                                           #define	__P18FXXX__	1
                                           
                                           
                                           		list	r=dec, n=96, st=off, mm=off
                                           
                                           	        nolist
                                           #endif
                                           
                                               global    _delay10tcy
                                               
                                               code
                                           
                                           _delay10tcy:
                                                 ; polynomial for 10tcy delay is f(x) = 10 * (x-1) + 10
00136a   06e8     decf    0xe8, 0x1, 0           decf      WREG, f
00136c   0000     nop                            nop
                                           
00136e   50e8     movf    0xe8, 0, 0             movf      WREG, w
001370   e007     bz      0x1380                 bz        @delay10_end
                                           
001372   d000     bra     0x1374                 bra       $+2
                                           
                                           @delay10_loop:
001374   d000     bra     0x1376                 bra       $+2
001376   d000     bra     0x1378                 bra       $+2
001378   d000     bra     0x137a                 bra       $+2
                                           
00137a   0000     nop                            nop
00137c   2ee8     decfsz  0xe8, 0x1, 0           decfsz    WREG, f
00137e   d7fa     bra     0x1374                 bra       @delay10_loop
                                           
                                           @delay10_end:
                                           
001380   0012     return  0                      return
                                           
                                                 end
                                           ;--------------------------------------------------------------------------
                                           ;  stack.S - automatically allocate stack for PIC16 targets
                                           ;            with out the need for using the #pragma stack
                                           ;            directive
                                           ;
                                           ;  Copyright (C) 2006, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                                   radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                                   global _stack
                                                   global _stack_end
                                           
                                           ; allocate space for stack
                                           stack_section   udata
                                           _stack          res     0xff
                                           _stack_end      res     1
                                           
                                                   end
